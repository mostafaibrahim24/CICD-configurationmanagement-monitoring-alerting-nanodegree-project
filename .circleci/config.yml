version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  # To empty the s3 bucket before the deletion
  empty-s3-bucket:
    parameters:
      when:
        type: string
        default: on_fail
    steps:
      - run:
          name: Empty s3 bucket on fail
          when: << parameters.when >>
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive ;
  # Destroy stacks on failure
  destroy-environment:
    steps:
      - run:
          name: Destroy environment (stacks) on failure  (Rollback)
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" ;
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  # Install AWS CLI
  install-awscli:
    parameters:
      when:
        type: string
        default: "always"
    steps:
      - run:
          name: Install AWS CLI
          when: << parameters.when >>
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  # Revert migrations
  revert-migrations:
    parameters:
      when:
        type: string
        default: on_fail
    steps:
      - run:
          name: Revert migrations
          when: << parameters.when >>
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/SQaF3btUos2KjYdFvqpTf6/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi


jobs:


  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Build frontend"
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Build Backend"
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Test Frontend"
          command: |
            cd frontend
            npm install
            npm run test
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: "Test Backend"
          command: |
            cd backend
            npm install
            npm run test
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # Installing Dependencies
      - run:
          name: install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Empty S3 Bucket on job failure
      - empty-s3-bucket
      # Destroy the stacks
      - destroy-environment
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  configure-infrastructure:
    docker:
      - image: cimg/python:3.10.4
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["81:5f:4b:af:92:fc:3e:bd:f5:bc:d3:34:a7:e2:c2:0b"]
      - attach_workspace:
          at: ~/
      # Installing Dependencies
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install --upgrade --user pip
            python3 -m pip install --upgrade --user awscli
            python3 -m pip install --upgrade --user ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Empty S3 Bucket on job failure
      - empty-s3-bucket
      # Destroy the stacks
      - destroy-environment
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1
    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb #SQaF3btUos2KjYdFvqpTf6
          command: |
            MIGRATION_STATUS_URL=https://kvdb.io/SQaF3btUos2KjYdFvqpTf6/migration_${CIRCLE_WORKFLOW_ID:0:7}
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                echo "Migration done. Sending (1) to ${MIGRATION_STATUS_URL}"
                curl -k ${MIGRATION_STATUS_URL}  -d '1'
            else
                echo "Migration failed. Sending (0) to ${MIGRATION_STATUS_URL}"
                curl -k ${MIGRATION_STATUS_URL}  -d '0'
            fi
      # Install AWS CLI on failure (to use it in destroying the stacks)
      - install-awscli:
          when: on_fail
      # Empty S3 Bucket on job failure
      - empty-s3-bucket
      # Destroy the stacks
      - destroy-environment
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      # Install AWS CLI
      - install-awscli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get Backend URL (API URL)
          command: |
            BACKEND_BASE_URL=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_BASE_URL}:3030"
            echo ${API_URL}
            echo "API_URL=http://${BACKEND_BASE_URL}:3030" > frontend/.env
            echo "http://${BACKEND_BASE_URL}:3030" > frontend/url.txt
            cat frontend/.env
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/.env
            - frontend/url.txt
            
      # Empty S3 Bucket on job failure
      - empty-s3-bucket
      # Destroy the stacks
      - destroy-environment
      # Revert migrations done in run migrations job
      - revert-migrations
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["81:5f:4b:af:92:fc:3e:bd:f5:bc:d3:34:a7:e2:c2:0b"]
      - attach_workspace:
          at: ~/
      # Installing Dependencies
      - run:
          name: Install gzip tar curl
          command: |
            apk add --update gzip tar curl
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Install nodejs and npm
          command: |
            apk add --update nodejs npm
      - run:
          name: Build
          working_directory: .
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .

      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            echo "[web]" > inventory.txt
      # Install AWS CLI on failure (to use it in destroying the stacks)
      - run:
          name: Install awscli for destroy-environment in case of job failure
          when: on_fail
          command: |
            pip3 install awscli
      # Empty S3 Bucket on job failure
      - empty-s3-bucket
      # Destroy the stacks
      - destroy-environment
      # Revert migrations done in run migrations job
      - revert-migrations
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Install AWS CLI
      - install-awscli
      - attach_workspace:
          at: .
      - run:
          name: Get backend url and smoke test backend
          working_directory: ./frontend
          command: |
           API_URL=$(<url.txt)
           echo ${API_URL}
           if curl -s -v --connect-timeout 30 --retry-connrefused 5 ${API_URL}/api/status | grep -q "ok"
           then
            exit 0
           else
            exit 1
           fi
            
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
            if curl ${FRONTEND_URL} | grep -q "Welcome"
            then
                exit 0
            else
                exit 1
            fi
      # Empty S3 Bucket on job failure
      - empty-s3-bucket
      # Destroy the stacks
      - destroy-environment
      # Revert migrations done in run migrations job
      - revert-migrations
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Install AWS CLI
      - install-awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export BLUE_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            echo "BLUE_ID is ${BLUE_ID}"
            echo $BLUE_ID > .circleci/files/blue_id.txt

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/files/blue_id.txt
      # Empty S3 Bucket on job failure
      - empty-s3-bucket
      # Destroy the stacks
      - destroy-environment
      # Revert migrations done in run migrations job
      - revert-migrations
      # CircleCI notifies on job failure
      - slack/notify:
          event: fail
          template: basic_fail_1


  cleanup:
      docker:
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Install AWS CLI
        - install-awscli
        - attach_workspace:
            at: ~/
        - run:
            name: Get old stack workflow id and Remove old stacks and files
            working_directory: .circleci/files
            command: |
              export BLUE_ID=`cat blue_id.txt`
              echo "BLUE_ID is ${BLUE_ID}"
              
              echo GREEN_ID the CIRCLE_WORKFLOW_ID is "udapeople - ${CIRCLE_WORKFLOW_ID:0:7}"
  
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names @: "${STACKS[@]}"

              if [[ -z "${STACKS[*]}" ]] || [[ -z "${BLUE_ID:10:16}" ]]
              then
                echo "Nothing to clean up!"
                exit 0
              fi

              if [[ "${STACKS[@]}" =~ "${BLUE_ID:10:16}" ]]
              then
                echo "Cleaning up ....."
                aws s3 rm s3://${BLUE_ID} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${BLUE_ID:10:16}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${BLUE_ID:10:16}
                echo "CLEAN."
              fi
        # CircleCI notifies on job failure
        - slack/notify:
            event: fail
            template: basic_fail_1
  
      
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-backend, scan-frontend]
          filters:
              branches:
                only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update] 
      